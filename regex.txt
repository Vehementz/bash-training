    Matching an IP Address:
        Regex: ^([0-9]{1,3}\.){3}[0-9]{1,3}$
        This regex matches a simple IP address format, ensuring that each octet is a number between 0 and 255. However, it doesn't check the range of each octet to ensure it's within 0-255.

    Validating an Email Address:
        Regex: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
        This pattern matches a basic email address format, checking for characters allowed in the local part, an @ symbol, domain part, and a top-level domain with at least two characters.

    Matching a Date in YYYY-MM-DD Format:
        Regex: ^(19|20)\d\d[-](0[1-9]|1[0-2])[-](0[1-9]|[12][0-9]|3[01])$
        This regex matches dates from the years 1900-2099 in the format YYYY-MM-DD, taking into account the format but not the validity of the date (e.g., February 30).

    Validating a Username:
        Regex: ^[a-zA-Z0-9_]{3,16}$
        Matches a username that is 3 to 16 characters long and contains only letters, numbers, and underscores.

    Checking for Hex Color Codes:
        Regex: ^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$
        Matches hexadecimal color codes, with or without the leading #, in either 3 or 6 characters length.

    Matching a URL:
        Regex: ^(https?://)?([\da-z.-]+)\.([a-z.]{2,6})([/\w .-]*)*/?$
        This pattern matches a basic URL structure, optionally starting with http:// or https://, followed by the domain name, and optionally ending with a slash and path. It does not account for all valid URL characters or structures but serves well for simple validation.

    Validating a Password:
        Regex: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$
        Ensures a password is at least 8 characters long and contains at least one lowercase letter, one uppercase letter, and one number. This is a basic check and can be adjusted for more complexity.

    Matching a 10-digit Phone Number:
        Regex: ^\d{10}$
        Matches a string of exactly 10 digits, useful for simple phone number validation without country codes or formatting.





grep Regular Expression Operator

I hope following table will help you quickly understand regular expressions in grep when using under Linux or Unix-like systems:
Table 1: grep (egrep) regex operator Operator 	Description 	Examples
. 	Matches any single character. 	

grep '.' file
grep 'foo.' input

? 	The preceding item is optional and will be matched
, at most, once. 	

grep 'vivek?' /etc/passwd

* 	The preceding item will be matched zero or more
times. 	

grep 'vivek*' /etc/passwd

+ 	The preceding item will be matched one or more
times. 	

ls /var/log/ | grep -E "^[a-z]+\.log."

{N} 	The preceding item is matched exactly N
times. 	

egrep '[0-9]{2} input

{N,} 	The preceding item is matched N or
more times. 	

egrep '[0-9]{2,} input

{N,M} 	The preceding item is matched at least
N times, but not more than M times. 	

egrep '[0-9]{2,4} input

- 	Represents the range if it’s not first or
last in a list or the ending point of a range in a list. 	

grep ':/bin/[a-z]*' /etc/passwd

^ 	Matches the empty string at the beginning
of a line; also represents the characters not in the range of
a list. 	

grep '^vivek' /etc/passwd
grep '[^0-9]*' /etc/passwd

$ 	Matches the empty string at the end
of a line. 	

grep '^$' /etc/passwd

\b 	Matches the empty string at the
edge of a word. 	

grep '\bvivek' /etc/passwd

\B 	Matches the empty string provided
it’s not at the edge of a word. 	

grep '\B/bin/bash' /etc/passwd

\< 	Match the empty string at the
beginning of word. 	

grep '\<vivek' /etc/passwd

\> 	Match the empty string at the
end of word. 	

grep 'bash\>' /etc/passwd
grep '\<vivek\>' /etc/passwd